package com.integral.service.communite.chinamobile;import com.alibaba.fastjson.JSONObject;import com.integral.utils.*;import org.springframework.stereotype.Service;import sun.rmi.runtime.Log;import javax.net.ssl.HttpsURLConnection;import javax.net.ssl.SSLContext;import javax.net.ssl.X509TrustManager;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.HttpURLConnection;import java.net.URL;import java.util.*;@Servicepublic class ChinaMobile implements IQueryIntegral {    private static Map<String,Map<String,String>> sessionID = new HashMap<String, Map<String, String>>();    private static final Object lock = new Object();    private MyX509TrustManager xtm = new MyX509TrustManager();    private MyHostNameVerify mhv = new MyHostNameVerify();    private SSLContext sslContext = null;    public ChinaMobile() throws Exception{        sslContext = SSLContext.getInstance("SSL");        X509TrustManager[] xtmArray = new X509TrustManager[]{xtm};        sslContext.init(null, xtmArray, new java.security.SecureRandom());    }    @Override    public JfResult requestVerifyCode(JfRequest request) throws Exception {        JfResult result = new JfResult();        result.setCode(Constants.ErrorCode.SEND_SMS_FAILED+"");        synchronized (this){            Map<String,String> cookie = new HashMap<>();            final String url = "https://login.10086.cn/sendRandomCodeAction.action";            final String requestBody = "userName="+request.getAccount()+"&type=01&channelID=12019";            byte[] data = requestBody.getBytes();            String length = String.valueOf(data.length);            HttpsURLConnection connection = (HttpsURLConnection) new URL(url).openConnection();            connection.setSSLSocketFactory(sslContext.getSocketFactory());            connection.setHostnameVerifier(mhv);            connection.setRequestMethod("POST");            connection.setDoOutput(true);            connection.setRequestProperty(Constants.HttpHeaders.USER_AGENT,Constants.DEFAULT_UA);            connection.setRequestProperty(Constants.HttpHeaders.CONTENT_LENGTH,length);            connection.setRequestProperty(Constants.HttpHeaders.CONTENT_TYPE,"application/x-www-form-urlencoded; charset=UTF-8");            connection.setRequestProperty(Constants.HttpHeaders.REFERER,"https://login.10086.cn/?channelID=12019&backUrl=http://jf.10086.cn/targetUrl=");            OutputStream os = connection.getOutputStream();            os.write(data);            os.flush();            os.close();            Common.updateCookie(connection,cookie);            sessionID.put(request.getAccount(),cookie);            String responseData = Common.inputStreamToString(connection.getInputStream());            if ("0".equals(responseData)){                result.setMessage("[中国移动]短信验证码发送成功");            }else{                result.setMessage("[中国移动]短信验证码发送失败");            }            acquireCaptchaCode(cookie);        }        return result;    }    @Override    public JfResult queryIntegral(JfRequest request) throws Exception {        JfResult result = new JfResult();        result.setCode(Constants.ErrorCode.GET_INTEGRAL_FAILED+"");        synchronized (this){            Map<String,String> thisCookie = sessionID.get(request.getAccount());            LoginData data = new LoginData();            data.timestamp = System.currentTimeMillis();            data.account=request.getAccount();            data.password = request.getCode();            LoginStatus status = doLoginChinaMobile(thisCookie,data);            if (!"0000".equals(status.code)){                result.setMessage("[中国移动]用户登录失败");                return result;            }            String artifactReceiverURL = status.assertAcceptURL+"?backUrl=http://jf.10086.cn/targetUrl="+"&artifact="+status.artifact;            doAccessArtifactURL(artifactReceiverURL,thisCookie);            String points = queryChinaMobileIntegral(thisCookie);            if (points==null){                result.setMessage("[中国移动]获取积分失败");            }else{                result.setMessage("[中国移动]获取积分成功");                result.setPoints(points);            }            doLogout(thisCookie);        }        return result;    }    private void acquireCaptchaCode(Map<String,String> cookie) throws Exception{        final String url = "https://login.10086.cn/captchazh.htm?type=12";        HttpsURLConnection connection = (HttpsURLConnection) new URL(url).openConnection();        connection.setSSLSocketFactory(sslContext.getSocketFactory());        connection.setHostnameVerifier(mhv);        connection.setRequestProperty(Constants.HttpHeaders.USER_AGENT,Constants.DEFAULT_UA);        connection.setRequestProperty(Constants.HttpHeaders.ACCEPT,"image/webp,image/*,*/*;q=0.8");        Common.updateCookie(connection,cookie);    }    private LoginStatus doLoginChinaMobile(Map<String ,String> cookie,LoginData data) throws Exception{        final String url = "https://login.10086.cn/login.htm?"+data.toString();        LoginStatus status=null;        HttpsURLConnection connection = (HttpsURLConnection) new URL(url).openConnection();        connection.setHostnameVerifier(mhv);        connection.setSSLSocketFactory(sslContext.getSocketFactory());        connection.setRequestProperty(Constants.HttpHeaders.USER_AGENT,Constants.DEFAULT_UA);        connection.setRequestProperty(Constants.HttpHeaders.ACCEPT,"application/json, text/javascript, */*; q=0.01");        connection.setRequestProperty(Constants.HttpHeaders.COOKIE,Common.buildCookieString(cookie));        connection.setRequestProperty(Constants.HttpHeaders.REFERER,"https://login.10086.cn/?channelID=12019&backUrl=http://jf.10086.cn/targetUrl=");        Common.updateCookie(connection,cookie);        String responseBody = Common.inputStreamToString(connection.getInputStream());        status = JSONObject.parseObject(responseBody, LoginStatus.class);        return status;    }    private void doAccessArtifactURL(String url,Map<String,String> cookie) throws Exception{        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();        connection.setRequestProperty(Constants.HttpHeaders.USER_AGENT,Constants.DEFAULT_UA);        connection.setRequestProperty(Constants.HttpHeaders.COOKIE,Common.buildCookieString(cookie));        connection.setInstanceFollowRedirects(false);        Common.updateCookie(connection,cookie);    }    private String queryChinaMobileIntegral(Map<String,String> cookie) throws Exception{        final String url = "http://jf.10086.cn/asynlogin/user/web/UserLoginAction?action=isUserLogin&time="+Long.toString(System.currentTimeMillis(),36);        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();        connection.setRequestMethod("POST");        connection.setDoOutput(true);        connection.setRequestProperty(Constants.HttpHeaders.USER_AGENT,Constants.DEFAULT_UA);        connection.setRequestProperty(Constants.HttpHeaders.COOKIE,Common.buildCookieString(cookie));        connection.setRequestProperty(Constants.HttpHeaders.CONTENT_TYPE,"application/json, text/javascript, */*; q=0.01");        connection.setRequestProperty(Constants.HttpHeaders.CONTENT_LENGTH,"0");        OutputStream os = connection.getOutputStream();        os.write("".getBytes());        os.flush();        os.close();        Common.updateCookie(connection,cookie);        String body = Common.inputStreamToString(connection.getInputStream());        UserInfo userInfo = JSONObject.parseObject(body,UserInfo.class);        if (!"USER_LOGIN_STATUS_LOGIN".equals(userInfo.status)){            return null;        }        AccountInfo accountInfo = JSONObject.parseObject(userInfo.info,AccountInfo.class);        return accountInfo.userCurrentIntegral;    }    private void doLogout(Map<String,String> cookie) throws Exception{        final String url = "http://jf.10086.cn/login/logout.jsp?isLogOut=true";        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();        connection.setRequestProperty(Constants.HttpHeaders.USER_AGENT,Constants.DEFAULT_UA);        connection.setRequestProperty(Constants.HttpHeaders.COOKIE,Common.buildCookieString(cookie));        connection.setRequestProperty(Constants.HttpHeaders.ACCEPT,"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");        connection.setInstanceFollowRedirects(false);    }    public static void main(String[] args){        try{            ChinaMobile chinaMobile = new ChinaMobile();            JfRequest request = new JfRequest();            request.setAccount("13456875762");            chinaMobile.requestVerifyCode(request);            System.out.println("请输入短信验证码：");            Scanner scanner = new Scanner(System.in);            String verifyCode = scanner.nextLine();            request.setCode(verifyCode);            JfResult result = chinaMobile.queryIntegral(request);            System.out.println(result.getPoints());        }catch (Exception e){            e.printStackTrace();        }    }}