package com.integral.service.communite.chinamobile;import com.alibaba.fastjson.JSONObject;import com.integral.utils.*;import org.springframework.stereotype.Service;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.HttpURLConnection;import java.net.URL;import java.util.*;@Servicepublic class ChinaMobile implements IQueryIntegral {    public static Map<String,Map<String,String>> chinaMobileSession = new HashMap<String, Map<String, String>>();    private static final Object lock = new Object();    @Override    public JfResult requestVerifyCode(JfRequest request) throws Exception {        synchronized (lock){            JfResult result = new JfResult();            Map<String,String> thisCookie = new HashMap<String, String>();            initCookie(request.getAccount(),thisCookie);            accessLoginPage(thisCookie);            String code = sendSmsPassWord(request.getAccount(),thisCookie);            if ("SUCCESS".equals(code)) {                result.setCode(Constants.ErrorCode.ERROR_SUCCESS+"");                result.setMessage("短信验证码发送成功");            }else{                result.setCode(Constants.ErrorCode.SEND_SMS_FAILED+"");                result.setMessage("短信验证码发送失败");            }            String id = Common.createUUID();            result.setId(id);            chinaMobileSession.put(id,thisCookie);            return result;        }    }    @Override    public JfResult queryIntegral(JfRequest request) throws Exception {        synchronized (lock) {            Map<String,String> cookie = chinaMobileSession.get(request.getId());            JfResult result = new JfResult();            String param = createLoginParam(request.getAccount(), request.getPassword(), request.getCode());            doLogin(cookie, param);            String data = queryIntegral(cookie);            if (data == null) {                result.setMessage("获取积分失败");                result.setCode(Constants.ErrorCode.GET_INTEGRAL_FAILED + "");                return result;            }            JSONObject object = JSONObject.parseObject(data);            if (object != null) {                if ("USER_LOGIN_STATUS_LOGIN".equalsIgnoreCase(object.getString("status"))) {                    JSONObject infoObj = object.getJSONObject("info");                    if (infoObj != null) {                        String userCurrentIntegral = infoObj.getString("userCurrentIntegral");                        result.setCode(Constants.ErrorCode.ERROR_SUCCESS+"");                        result.setMessage("获取积分成功");                        result.setPoints(userCurrentIntegral);                    }                }            }            chinaMobileSession.remove(request.getId());            return result;        }    }    /**     * 发送短信验证码     * @param phone     * @return     * @throws Exception     */    private String sendSmsPassWord(String phone,Map<String,String> cookie) throws Exception {        URL forRead = new URL(CMConstans.SEND_SMS_CONFIRM_CODE_PAGE);        HttpURLConnection connection = (HttpURLConnection) forRead.openConnection();        connection.setDoOutput(true);        connection.setRequestProperty("Accept", "*/*");        connection.setRequestProperty("Accept-Encoding", "gzip, deflate, br");        connection.setRequestProperty("Referer", "https://jf.10086.cn/login/login.jsp");        connection.setRequestProperty("Cookie", map2String(cookie));        connection.setRequestProperty("User-Agent", Constants.DEFAULT_UA);        connection.setRequestMethod("POST");        OutputStream os = connection.getOutputStream();        byte[] content = ("action=sendSmsConfirmCode&mobileNo=" + phone).getBytes();        os.write(content);        os.flush();        os.close();        updateChinaMobileCookie(connection, cookie);        return readInputStream(connection.getInputStream());    }    private String map2String(Map<String,String> cookie) {        StringBuilder data = new StringBuilder();        for (String key : cookie.keySet()) {            data.append(key).append("=").append(cookie.get(key)).append(";");        }        String cookies = data.toString();        return cookies.substring(0, cookies.length() - 1);    }    /**     * 初始化一些必要的cookie数据     * @param phone     * @throws Exception     */    private void initCookie(String phone,Map<String,String> cookies) throws Exception {        cookies.put(CMConstans.WT_FPC, getWT_FPC_ID());        String id = createAWSUSER_AWSSESSION_ID();        cookies.put(CMConstans.AWSUSER_ID, id);        cookies.put(CMConstans.AWSSESSION_ID, id);        cookies.replace(CMConstans.UID, phone);    }    private void accessLoginPage(Map<String ,String> cookie) throws Exception {        URL forRead = new URL(CMConstans.JF_LOGIN_PAGE);        HttpURLConnection connection = (HttpURLConnection) forRead.openConnection();        connection.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");        connection.setRequestProperty("Accept-Encoding", "gzip, deflate, sdch, br");        connection.setRequestProperty("Referer", "http://jf.10086.cn/");        connection.setRequestProperty("Content-Type", "text/html; charset=UTF-8");        connection.setRequestProperty("User-Agent", Constants.DEFAULT_UA);        updateChinaMobileCookie(connection, cookie);    }    private void doLogin(Map<String,String> thisCookie,String param) throws Exception {        URL url = new URL(CMConstans.LOGIN_PAGE);        HttpURLConnection connection = (HttpURLConnection) url.openConnection();        byte[] content = param.getBytes();        connection.setDoOutput(true);        connection.setRequestProperty("Cookie", map2String(thisCookie));        connection.setRequestProperty("User-Agent", Constants.DEFAULT_UA);        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");        connection.setRequestProperty("Content-Length", String.valueOf(content.length));        connection.setRequestMethod("POST");        OutputStream os = connection.getOutputStream();        os.write(content);        os.flush();        os.close();        updateChinaMobileCookie(connection, thisCookie);    }    private String queryIntegral( Map<String,String> thisCookie) throws Exception {        String data = null;        URL forRead = new URL(CMConstans.QUERY_PAGE);        HttpURLConnection connection = (HttpURLConnection) forRead.openConnection();        connection.setDoOutput(true);        connection.setDoInput(true);        connection.setRequestProperty("Accept", "*/*");        connection.setRequestProperty("Accept-Encoding", "gzip, deflate, br");        connection.setRequestProperty("Referer", "https://jf.10086.cn/login/login.jsp");        connection.setRequestProperty("Cookie", map2String(thisCookie));        connection.setRequestProperty("User-Agent", Constants.DEFAULT_UA);        connection.setRequestMethod("POST");        OutputStream os = connection.getOutputStream();        byte[] content = ("action=isUserLogin&time=" + Long.toString(System.currentTimeMillis(), 36)).getBytes();        os.write(content);        os.flush();        os.close();        updateChinaMobileCookie(connection,thisCookie);        if (HttpURLConnection.HTTP_OK == connection.getResponseCode()) {            data = readInputStream(connection.getInputStream());        }        return data;    }    /**     * 更新Cookie     * @param connection     * @param cookie     */    private void updateChinaMobileCookie(HttpURLConnection connection,Map<String,String> cookie) {        Map<String, List<String>> headerFields = connection.getHeaderFields();        if (!headerFields.containsKey("Set-Cookie")) {            return;        }        List<String> cookieValues = headerFields.get("Set-Cookie");        for (String value : cookieValues) {            String[] theCookie = value.split(";");            String[] values = theCookie[0].split("=");            cookie.put(values[0], values[1]);        }    }    private String readInputStream(InputStream is) throws Exception {        String data = null;        if (is == null) {            return null;        }        BufferedReader br = new BufferedReader(new InputStreamReader(is));        StringBuilder sb = new StringBuilder();        String line;        while ((line = br.readLine()) != null) {            sb.append(line);        }        data = sb.toString();        return data;    }    public String createLoginParam(String phone,String password,String code) {        String pwd = encryptPassword(password);        return "action=login&mobilePhone="                + phone                + "&code=&password="                + pwd                + "&isRememberMe=0&smsConfirmCode=" + code;    }    private String encryptPassword(String pwd) {        final String KEY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";        String pwdEncrypted = "";        int char_1, char_2, char_3;        int char_11, char_22, char_33, char_44;        int index = 0;        do {            char_1 = pwd.charAt(index++);            char_2 = pwd.charAt(index++);            char_3 = pwd.charAt(index++);            char_11 = char_1 >> 2;            char_22 = (char_1 & 3) << 4 | char_2 >> 4;            char_33 = (char_2 & 15) << 2 | char_3 >> 6;            char_44 = char_3 & 63;            if (char_2 > 64) {                char_33 = char_44 = 64;            } else if (char_3 > 64) {                char_44 = 64;            }            pwdEncrypted = pwdEncrypted + KEY.charAt(char_11) + KEY.charAt(char_22) + KEY.charAt(char_33) + KEY.charAt(char_44);        } while (index < pwd.length());        return pwdEncrypted;    }    private String createAWSUSER_AWSSESSION_ID() {        Random random = new Random();        String number = String.valueOf(random.nextLong());        if (number.startsWith("-")) {            number = number.substring(1);        }        number = number.substring(0, 15) + "0000";        return number;    }    private String getWT_FPC_ID() throws Exception {        String R1 = String.valueOf(Math.random());        String R2 = String.valueOf(Math.random());        R1 = R1.substring(2);        R2 = R2.substring(2);        String F = R1 + R2;        long time = System.currentTimeMillis();        return "id=" + F + ":lv=" + String.valueOf(time) + ":ss=" + String.valueOf(time);    }    public static void main(String[] args){        try{            ChinaMobile chinaMobile = new ChinaMobile();            JfRequest request = new JfRequest();            request.setAccount("13456875762");            JfResult jfResult = chinaMobile.requestVerifyCode(request);            request.setPassword("254894");            request.setId(jfResult.getId());            Scanner scanner = new Scanner(System.in);            System.out.println("请输入动态验证码:");            request.setCode(scanner.nextLine());            jfResult=chinaMobile.queryIntegral(request);            System.out.println(jfResult.getPoints());        }catch (Exception e){            e.printStackTrace();        }    }}